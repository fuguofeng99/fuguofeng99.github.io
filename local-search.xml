<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring框架学习总结一</title>
    <link href="/2020/07/28/Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <url>/2020/07/28/Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h5 id="Spring-框架的介绍"><a href="#Spring-框架的介绍" class="headerlink" title="Spring 框架的介绍"></a>Spring 框架的介绍</h5><p>Spring框架是一个Java平台，为开发Java应用程序提供全面的基础架构支持。Spring处理基础结构，因此您可以专注于应用程序。Spring使您能够从“普通的Java对象”（POJO）构建应用程序，并将企业服务非侵入性地应用于POJO。此功能适用于Java SE编程模型以及全部和部分Java EE。<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/index.html" target="_blank" rel="noopener">Sping中文api文档</a></p><p><strong>目的</strong>：解决企业应用开发的复制性。</p><p><strong>功能</strong>：使用基本的JavaBean代替EJB(开发和部署多层结构的、分布式的、面向对象的Java应用系统的跨平台的构件体系结构)，并提供了更多的企业应用功能。</p><p><strong>Spring是一个轻量级控制反转(IOC)和面向切面(AOP)的容器框架</strong>。</p><p><strong>IOC技术介绍：</strong></p><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/面向对象编程" target="_blank" rel="noopener">面向对象编程</a>中的一种设计原则，可以用来减低计算机代码之间的<a href="https://baike.baidu.com/item/耦合度" target="_blank" rel="noopener">耦合度</a>。最常见的方式是<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>）。通过控制反转（Ioc)的技术达到松耦合的目的。</p><ul><li><p>Ioc就是将对象的创建权交给Spring容器，在需要的时候直接得到对象。</p></li><li><p>Spring提供面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性开发。业务逻辑就是管理商品的入库与出库，系统逻辑就是对商品入库和出库的日志进行统一记录，以及事务管理。</p></li><li><p>Spring包含并管理应用对象的配置和生命周期，这个意义上是一种容器。</p></li><li><p>Spring将简单的组件配置，组合成为复制的应用，这个意义上是框架。</p></li></ul><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>Spring框架包含组织为约20个模块的功能。这些模块分为核心容器，数据访问/集成，Web，AOP（面向方面的编程），检测，消息传递和测试，如下图所示。</p><p><img src="hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/Sping1-1595940487294.png" srcset="/img/loading.gif" alt="spring1"></p><h5 id="需要的jar包的介绍"><a href="#需要的jar包的介绍" class="headerlink" title="需要的jar包的介绍"></a>需要的jar包的介绍</h5><p><strong>spring-core-4.1.6.RELEASE.jar</strong></p><ul><li>核心模块提供了框架的基本组成部分，包含IOC和依赖注入功能。</li></ul><p><strong>spring-beans-4.1.6.RELEASE.jar</strong></p><ul><li>Bean模块提供BeanFactory，它是一个工厂模型的复杂实现。</li></ul><p><strong>spring-context-4.1.6.RELEASE.jar</strong></p><ul><li>上下文模块建立在有核心和Bean模块提供的坚实的基础上，他是访问定义和配置的任何对象的媒介，AppliactionContext接口是上下文接口的重点。</li></ul><p><strong>spring-expression-4.1.6.RELEASE.jar</strong></p><ul><li>模块提供了一种功能强大的<a href="D://2004班资料/课件文档/05-SSM框架/2-Spring/资料/spring-framework-4.1.6.RELEASE-dist/spring-framework-4.1.6.RELEASE/docs/spring-framework-reference/html/expressions.html">表达式语言，</a>用于在运行时查询和操作对象图。它是对JSP 2.1规范中指定的统一表达语言（统一EL）的扩展。该语言支持设置和获取属性值，属性分配，方法调用，访问数组，集合和索引器，逻辑和算术运算符，命名变量以及按名称从Spring的IoC容器中检索对象的内容。它还支持列表投影和选择以及常见的列表聚合。</li></ul><h5 id="需要引入的约束"><a href="#需要引入的约束" class="headerlink" title="需要引入的约束"></a>需要引入的约束</h5><p>在src目录下新建xml文件命名为官方推荐名字：applicationContext.xml并引入约束。</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- bean definitions here --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h5 id="Spring的运行原理"><a href="#Spring的运行原理" class="headerlink" title="Spring的运行原理"></a>Spring的运行原理</h5><p><img src="hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/Spring2.png" srcset="/img/loading.gif" alt="spring2"></p><h5 id="Bean的作用域-单态模式singleton-原型模式prototype"><a href="#Bean的作用域-单态模式singleton-原型模式prototype" class="headerlink" title="Bean的作用域(单态模式singleton\原型模式prototype)"></a>Bean的作用域(单态模式singleton\原型模式prototype)</h5><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span>        <span class="hljs-comment">&lt;!--下面等同于UserServiceImpl userServiceImpl = new UserServiceImpl(),把对象实例放入了Spring容器中--&gt;</span>        <span class="hljs-comment">&lt;!--scope不写的话默认情况下是单态模式scope="singleton",声明scope="prototype",当前变成了原型模式--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userServiceImpl"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.spring.service.impl.UserServiceImpl"</span><span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h5 id="基于XML的注入-di"><a href="#基于XML的注入-di" class="headerlink" title="基于XML的注入(di)"></a>基于XML的注入(di)</h5><p>所谓注入，可理解为对象的属性赋值</p><ol><li>简单数据类型和引用数据类型注入</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.spring.pojo.User"</span>&gt;</span>            <span class="hljs-comment">&lt;!--给属性注入值:name映射pojo类中的属性名,value:指定要注入的值--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sid"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"uname"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"张翰"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pwd"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"spower"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>通过构造器注入</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.spring.pojo.User"</span>&gt;</span>            <span class="hljs-comment">&lt;!--通过构造器注入--&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sid"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"uname"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"张三"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pwd"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"321"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"spower"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>            <span class="hljs-comment">&lt;!--注入引用数据--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"account"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"account"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"account"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.spring.pojo.Account"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"aid"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"money"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1200"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p><strong>注意：pojo实体类中必须含有对应的构造方法</strong></p><ol start="3"><li><p>域属性自动注入（byName\byType；局部和全局配置）</p><p>autowire=*”byName”<em>default-autowire=</em>“byType”*</p></li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&lt;bean id="user" class="com.spring.pojo.User" autowire="byType"&gt;  局部根据类型自动注入--&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span></span>       default-autowire="byName"&lt;!--全局配置配置自动注入--&gt;&gt;</code></pre><h5 id="基于注解的DI注入"><a href="#基于注解的DI注入" class="headerlink" title="基于注解的DI注入"></a>基于注解的DI注入</h5><ol><li><p>环境搭建：导入aop包（spring-aop-4.1.6.RELEASE.jar）, 添加context约束头信息（组件扫描器）</p></li><li><p>常用注解：@Component，表示当前修饰的类交给Spring容器管理</p><p>修饰一个类，将这个类交给Spring管理。与@Component相同功能的还有三个衍生注解，都是用来修饰类：</p><p>@Repository:添加在Dao实现类上。</p><p>@Service：添加在Service实现类上。</p><p>@Controller:添加在Controller类上。</p></li></ol><p>@Value:给属性的基本数据类型赋值,可以放在属性上,页可以放在属性的set方法上。</p><p>@Scope:指定类是单态模式还是原型模式。</p><ol start="3"><li>给属性的应用数据类型注值</li></ol><p>@Autowired : 设置对象类型的属性的值。但它是按照对象的类型来注入，跟注解的名字无关。</p><p>@Resource : 完成对象类型值的注入，按照名字注入。</p><h5 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h5><p>再增加四个包:</p><p>mybatis-spring-1.2.3.jar  (mybatis与spring的整合包)</p><p>spring-jdbc-4.1.6.RELEASE.jar</p><p>依赖于:</p><p>spring-aop-4.1.6.RELEASE.jar </p><p>spring-tx-4.1.6.RELEASE.jar 事务</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybaits的框架学习总结三</title>
    <link href="/2020/07/20/Mybaits%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%89/"/>
    <url>/2020/07/20/Mybaits%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h4 id="Mybaits的缓存机制"><a href="#Mybaits的缓存机制" class="headerlink" title="Mybaits的缓存机制"></a>Mybaits的缓存机制</h4><p>作用：缓存用于提高查询的效率，MyBatis 的缓存是使用 SQL 标签（也就是属性）的 ID 作为缓存的唯一标识的。执行相同的标签可以使用缓存，不同的标签不能使用缓存。</p><p>MyBatis 中有两种缓存机制。一级缓冲和二级缓存。</p><ul><li><p>一级缓冲默认开启。线程级别的缓存，SqlSession 的缓存， 在一个 SqlSession 生命周期中有效。SqlSession 关闭，缓存清空。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;       User u = <span class="hljs-keyword">new</span> User();       u.setUname(<span class="hljs-string">"赵飞燕"</span>);       User user = mapper.selBy(u);       System.out.println(user);       System.out.println(<span class="hljs-string">"------缓存中的数据-------"</span>);<span class="hljs-comment">//session.clearCache();//清除SqlSession中的缓存</span>       <span class="hljs-comment">//默认情况下缓存中有相同的数据,就从缓存中取数据</span>       User u2 = <span class="hljs-keyword">new</span> User();       u2.setUname(<span class="hljs-string">"赵飞燕"</span>);       User user2 = mapper.selBy(u2);       System.out.println(user2);   &#125;</code></pre></li><li><p>二级缓冲， 进程级别的缓存，SqlSessionFactory 的缓存。在一个 SqlSessionFactory 生命周期中有效，可以在多个 SqlSession 生命中期中共享。默认关闭, 需要使用的时候, 要为某个命名空间开启二级缓存(在 mapper.xml 中配置<cache>)。在applicationContext-dao.xml核心配置文件中加。在mapper.xml映射文件中第一行加<cache/>。</p></li></ul><blockquote><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--告知 MyBatis 框架开启二级缓存,在核心文件中添加--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><p>//还需要在 Mapper 对应的xml中添加 cache 标签，表示对哪个mapper 开启缓存。</p></blockquote><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;    User u = <span class="hljs-keyword">new</span> User();    u.setUname(<span class="hljs-string">"赵飞燕"</span>);    User user = mapper.selBy(u);    System.out.println(user);    System.out.println(<span class="hljs-string">"------缓存中的数据-------"</span>);  <span class="hljs-comment">//二级缓存开启之后,会把一级缓存的数据移到SqlSessionFactory中</span>    User u2 = <span class="hljs-keyword">new</span> User();    u2.setUname(<span class="hljs-string">"赵飞燕"</span>);    User user2 = mapper.selBy(u2);    System.out.println(user2);&#125;</code></pre><p>想完整了解的Mybaits底层缓存机制的，可以看看这位大佬的<a href="https://www.cnblogs.com/wuzhenzhao/p/11103043.html" target="_blank" rel="noopener">博客</a>。</p><h4 id="如何解决数据库中的列名与Pojo类中属性不一致"><a href="#如何解决数据库中的列名与Pojo类中属性不一致" class="headerlink" title="如何解决数据库中的列名与Pojo类中属性不一致"></a>如何解决数据库中的列名与Pojo类中属性不一致</h4><p>在查询语句中使用resultType属性，意味着使用Mybaits的Auto-Mapping(自动映射机制)，即相同的列名和属性名会自动匹配。因此，当数据库表的列名和类的属性名不一致时，会导致查不到数据。解决该问题可以有两种方式:</p><ol><li>方法一：查询时，可以通过列别名的方式将列名和属性名保持一致，继续使用自动映射， 从而解决该问题。但是较为麻烦。</li><li>方法二：使用<resultMap>，<resultMap>用于自定义映射关系，可以由程序员自主制定列名和属性名的映射关系。一旦使用 resultMap， 表示不再采用自动映射机制。</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"map"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.batis.pojo.Tuser"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"tid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>   <span class="hljs-comment">&lt;!--主键用id标签,用result也可以,只是为了区别主键--&gt;</span>    <span class="hljs-comment">&lt;!--column写数据库中的列名,property写pojo中对应的属性名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"uname"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"tname"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"pwd"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"tpwd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"spower"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"tpower"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"find"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"map"</span>&gt;</span>    select sid,uname,pwd,spower from t_user2<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h4 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h4><h5 id="业务装配实现多表查询-多对一"><a href="#业务装配实现多表查询-多对一" class="headerlink" title="业务装配实现多表查询(多对一)"></a>业务装配实现多表查询(多对一)</h5><p>mapper 层只做单表查询操作， 在 service 层进行手动装配，实现关联查询的结果。</p><p>实例：</p><p>oracle数据库：</p><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(       <span class="hljs-keyword">sid</span> <span class="hljs-built_in">number</span>(<span class="hljs-number">3</span>) primary <span class="hljs-keyword">key</span>,       sname <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">20</span>),       age <span class="hljs-built_in">number</span>(<span class="hljs-number">3</span>),       cid <span class="hljs-built_in">number</span>(<span class="hljs-number">3</span>),       <span class="hljs-keyword">constraints</span> fk_student_cid <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(cid) <span class="hljs-keyword">references</span> clazz(cid))<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> clazz(       cid <span class="hljs-built_in">number</span>(<span class="hljs-number">3</span>) primary <span class="hljs-keyword">key</span>,       cname <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">20</span>),       roon <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">20</span>))</code></pre><p>创建实体类：创建班级类(Clazz)和学生类(Student)，并在 Student 中添加一个 Clazz 类型的属性，用于表示学生的班级信息。</p><p>mapper层，提供 StudentMapper 和 ClazzMapper, StudentMapper 查询所有学生信息, ClazzMapper 根据编号查询班级信息。调用 mapper 层，先查询所有学生，再根据每个学生的班级编号查询班级信息， 手动进行组装，称之为业务装配。</p><h5 id="resultMap的N-1方式实现多表查询-多对一"><a href="#resultMap的N-1方式实现多表查询-多对一" class="headerlink" title="resultMap的N+1方式实现多表查询(多对一)"></a>resultMap的N+1方式实现多表查询(多对一)</h5><p>这种方法是在配置文件中直接完成装配，实体类没有变动。</p><p>mapper层，提供 StudentMapper 和 ClazzMapper, StudentMapper 查询所有学生信息 , ClazzMapper 根据编号查询班级信息 ，再 StudentMapper 中使用<association>设置装配。</p><ol><li><association>用于关联一个对象<ul><li>property: 指定要关联的属性名。</li><li>select: 设定要继续引用的查询, namespace+id。</li><li>column: 查询时需要传递的列。</li></ul></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"m"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Student"</span>&gt;</span>    <span class="hljs-comment">&lt;!--同名列的id和result可以省略不写--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"sid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">""</span> <span class="hljs-attr">column</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>  <span class="hljs-comment">&lt;!--如果pojo实体类中的属性名和数据库中的列名不一致,那么要写result标签中的映射关系--&gt;</span>    <span class="hljs-comment">&lt;!--property:写在student实体类中持有Clazz的属性名</span><span class="hljs-comment">    select:通过哪条sql完成班级的查询,</span><span class="hljs-comment">    column:根据指定查询的列名</span><span class="hljs-comment">    javaType:查询之后的结果需要封装成的对象</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"clazz"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"com.batis.mapper.ClazzMapper.selByCno"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"Clazz"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cid"</span>&gt;</span>        <span class="hljs-comment">&lt;!--同名列的id和result可以省略不写--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selByName2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"m"</span>&gt;</span>    select * from student where sname = #&#123;0&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>由于装配已经完成，service 层只需要调用 mapper 即可，不需要再进行装配了。</p><h5 id="resultMap-的关联方式实现多表查询-多对一"><a href="#resultMap-的关联方式实现多表查询-多对一" class="headerlink" title="resultMap 的关联方式实现多表查询(多对一)"></a>resultMap 的关联方式实现多表查询(多对一)</h5><ol><li><p>在 StudentMapper.xml 中定义多表连接查询 SQL 语句。一次性查到需要的所有数据，包括对应班级的信息。</p></li><li><p>通过<resultMap>定义映射关系，并通过<association>指定对象属性的映射关系。可以把<association>看成一个<resultMap>使用。javaType 属性表示当前对象， 可以写全限定路径或别名。</p></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"m"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Student"</span>&gt;</span>    <span class="hljs-comment">&lt;!--主键得写上,同名列的result可以省略不写--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"sid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">""</span> <span class="hljs-attr">column</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>  <span class="hljs-comment">&lt;!--如果pojo实体类中的属性名和数据库中的列名不一致,那么要写result标签中的映射关系--&gt;</span>    <span class="hljs-comment">&lt;!--property:写在student实体类中持有Clazz的属性名</span><span class="hljs-comment">    select:通过哪条sql完成班级的查询,</span><span class="hljs-comment">    column:根据指定查询的列名</span><span class="hljs-comment">    javaType:查询之后的结果需要封装成的对象</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>  <span class="hljs-comment">&lt;!--外键的列映射关系一定得写上,否则cid没有值--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"clazz"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"com.batis.mapper.ClazzMapper.selByCno"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"Clazz"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cid"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selByName2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"m"</span>&gt;</span>    select * from student where sname = #&#123;0&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h5 id="resultMap-的-N-1-方式实现多表查询-一对多"><a href="#resultMap-的-N-1-方式实现多表查询-一对多" class="headerlink" title="resultMap 的 N+1 方式实现多表查询(一对多)"></a>resultMap 的 N+1 方式实现多表查询(一对多)</h5><p>mapper层提供 ClazzMapper 和 StudentMapper， ClazzMapper 查询所有班级信息，StudentMapper 根据班级编号查询学生信息 。在 ClazzMapper 中使用<collection>设置装配。</p><ol><li><collection>用于关联一个集合</li></ol><ul><li><p>property: 指定要关联的属性名</p></li><li><p>select: 设定要继续引用的查询, namespace+id</p></li><li><p>column: 查询时需要传递的列</p></li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&lt;collection property="" select="" column=""&gt;&lt;/collection&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cc"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Clazz"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>   <span class="hljs-comment">&lt;!--作为主键又是外键的列一定得写上,否则clazz中的cid没有值--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"stus"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"com.batis.mapper.StudentMapper.selByCid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selByCno"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"cc"</span>&gt;</span>    select * from clazz where cid = #&#123;0&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h5 id="resultMap-的关联方式实现多表查询-一对多"><a href="#resultMap-的关联方式实现多表查询-一对多" class="headerlink" title="resultMap 的关联方式实现多表查询(一对多)"></a>resultMap 的关联方式实现多表查询(一对多)</h5><ol><li><p>在 ClazzMapper.xml 中定义多表连接查询 SQL 语句，一次性查到需要的所有数据, 包括对应学生的信息。</p></li><li><p>通过<resultMap>定义映射关系，并通过<collection>指定集合属性泛型的映射关系。可以把<collection>看成一个<resultMap>使用。ofType 属性表示集合的泛型，可以写全限定路径或别名。&lt;collection property=*””* javaType=*””* ofType=*””* &gt;</p></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dd"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Clazz"</span>&gt;</span>    <span class="hljs-comment">&lt;!--数据库列名与pojo实体类是映射关系一定要写上--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cname"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"cname"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"roon"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"roon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    javaType:返回的对象类型,查MyBatis的中文文档集合List对象的别名是list</span><span class="hljs-comment">    ofType:返回集合的泛型</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"stus"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"Student"</span>&gt;</span>        <span class="hljs-comment">&lt;!--数据库列名与pojo实体类是映射关系一定要写上--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"sid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"sname"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sname"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"age"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"age"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selByCno2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"dd"</span>&gt;</span>    select c.cid,c.cname,c.roon,s.sid,s.sname,s.age from clazz c join student s on c.cid = s.cid where c.cid = #&#123;0&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h5 id="通过-Auto-Mapping-实现多表查询"><a href="#通过-Auto-Mapping-实现多表查询" class="headerlink" title="通过 Auto-Mapping 实现多表查询"></a>通过 Auto-Mapping 实现多表查询</h5><p>a) 通过 MyBatis 的 Auto-Mapping 机制及数据库查询时的别名结合，可以方便的实现多表查询。</p><p>b) SQL 语句中， 别名出现特殊符号时，必须进行处理. MySQL可以使用(``)符号，Oracle 可以使用(“”)符号。缺点:适合于一对多的查询，多对一查集合不好用。</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询：员工的信息及其部门信息（一对多）--&gt;</span><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.batis.mapper.StudentMapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selAuto"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Student"</span>&gt;</span>        <span class="hljs-comment">&lt;!--clazz是Student的实体类中持有Clazz类的实姓名--&gt;</span>        select s.sid,s.sname,s.age,s.cid,c.cid "clazz.cid",c.cname "clazz.cname",c.roon "clazz.roon" from student s join clazz c on s.cid = c.cid where s.sname=#&#123;0&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h5 id="用注解完成增删改查"><a href="#用注解完成增删改查" class="headerlink" title="用注解完成增删改查"></a>用注解完成增删改查</h5><p>在接口的抽象方法上写@select(“sql语句”)，@insert(“sql语句”)，@delete(“sql语句”)，@update(“sql语句”)以替代mapper.xml文件。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.batis.pojo.Student;<span class="hljs-keyword">import</span> com.batis.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Update;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;    <span class="hljs-meta">@Select</span>(value = <span class="hljs-string">"select * from Student where sname=#&#123;0&#125;"</span>)  <span class="hljs-comment">//用注解替代了StudentMapper.xml配置文件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">selByName</span><span class="hljs-params">(String sname)</span></span>;    <span class="hljs-meta">@Update</span>(value = <span class="hljs-string">"update Student set sname=#&#123;sname&#125;,age=#&#123;age&#125; where sid = #&#123;sid&#125; "</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateStu</span><span class="hljs-params">(Student stu)</span></span>;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Mybaits框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybaits的框架学习总结二</title>
    <link href="/2020/07/19/Mybaits%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%BA%8C/"/>
    <url>/2020/07/19/Mybaits%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h5 id="查询语句参数的传入"><a href="#查询语句参数的传入" class="headerlink" title="查询语句参数的传入"></a>查询语句参数的传入</h5><ol><li><p>方法一</p><p>首先在接口中定义方法，映射文件中提供对应的标签。 此时, SQL 语句中获取方式有两种，通过#{param+数字}和#{arg+数字}的方式。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectuser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span><span class="hljs-comment">&lt;!--在核心配置文件中使用typeAlias，取了别名，这里直接用user--&gt;</span>select * from t_user2 where uname=#&#123;arg0&#125; and pwd = #&#123;arg1&#125;select * from t_user2 where uname=#&#123;param1&#125; and pwd = #&#123;param2&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></li><li><p>方法二</p><p> 接口中定义方法，参数中使用@Param 注解设定参数名用于在 SQL 语句中使用。@Param后面是sql中使用的别名。映射文件中提供对应的标签。 SQL 语句中获取方式有两种, 通过#{参数名称}或#{param+数字}的方式。</p></li><li><p>参数个数的查询</p><ul><li><p>一个参数时，#{}中可以任意填写。</p></li><li><p>多个参数的查询，多个参数传递时，由于 sqlSession 中提供的查询方法只允许传入一个参数，因此可以对多个参数进行封装，可以使用对象或 Map 集合。</p><pre><code class="hljs **public">UserMapper mapper;public TestBatis() throws IOException &#123;&#x2F;&#x2F;加载mybatis的核心配置文件applicationContext-dao.xml,注意配置文件要放在src目录下Reader in &#x3D; Resources.*getResourceAsReader(&quot;applicationContext-dao.xml&quot;);&#x2F;&#x2F;通过配置文件构建工厂类SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(in);&#x2F;&#x2F;通过工厂类创建发送sql语句的session对象,默认事务的提交是手动的SqlSession session &#x3D; factory.openSession();mapper &#x3D; session.getMapper(UserMapper.class);&#125;&#125;</code></pre><p>接口中</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">selByMap</span><span class="hljs-params">(Map&lt;String,String&gt; map)</span></span>;</code></pre><p>映射文件中</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selByMap"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>    select * from t_user2 where uname=#&#123;name&#125; and pwd = #&#123;pwd&#125;  <span class="hljs-comment">&lt;!--取map集合中的key的名字--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>测试程序代码：</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selByMap</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//加载mybatis的核心配置文件applicationContext-dao.xml,注意配置文件要放在src目录下</span>    Reader in = Resources.getResourceAsReader(<span class="hljs-string">"applicationContext-dao.xml"</span>);    <span class="hljs-comment">//通过配置文件构建工厂类</span>    SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);    <span class="hljs-comment">//通过工厂类创建发送sql语句的session对象,默认事务的提交是手动的</span>    SqlSession session = factory.openSession();    UserMapper mapper = session.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">"name"</span>,<span class="hljs-string">"曹操"</span>); <span class="hljs-comment">//key的名字随便取</span>    map.put(<span class="hljs-string">"pwd"</span>,<span class="hljs-string">"123456"</span>);    User user = mapper.selByMap(map);    System.out.println(user);    session.commit();<span class="hljs-comment">//手动提交</span>    session.close();<span class="hljs-comment">//关闭流</span>&#125;</code></pre></li></ul></li></ol><h5 id="inser新增语句"><a href="#inser新增语句" class="headerlink" title="inser新增语句"></a>inser新增语句</h5><p>在mapper 文件中， 通过<insert>定义新增语句。注意， 由于 DML 操作的返回值都是 int 类型 ， 所以 ， 不需要定义 resultType 属性。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"adduser"</span>&gt;</span>insert into usertable values(seq_user_uid.nextval,#&#123;uname&#125;,#&#123;pwd&#125;,#&#123;spower&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre><h5 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h5><p>与上述insert语句类似，通过<delete>定义语句，同样不需要写resultType。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span>&gt;</span>delete from t_user2 where uname = #&#123;uname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></code></pre><h5 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h5><p>修改语句的情况比上述的新增，删除麻烦许多，如果你是每次修改都是将所有属性进行修改， 那就跟上述的新增的操作一样。可我要是只想修改某一个属性，而且想要修改属性的个数和种类不确定，这样的需求下，我们就使用动态的sql语句。</p><h5 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h5><p>根据条件的不同， SQL 语句也会随之动态的改变。MyBatis 中，提供了一组标签用于实现动态 SQL。</p><ol><li><if> 用于进行条件判断，test 属性用于指定判断条件。 为了拼接条件， 在 SQL 语句后强行添加 1=1 的恒成立条件。</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.batis.mapper.UserMapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selBy"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>        select * from t_user2 where 1=1        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"uname != null and uname != ''"</span>&gt;</span>            and uname = #&#123;uname&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"pwd !=null and pwd !=''"</span>&gt;</span>            and pwd = #&#123;pwd&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"sid != 0"</span>&gt;</span>            and sid = #&#123;sid&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ol start="2"><li><where> 如果没有条件，不会生成 where 关键字，如果符合条件， 会自动添加 where 关键字，多个条件符合时会添加and。</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selBy2"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>    select * from t_user2    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>   <span class="hljs-comment">&lt;!--如果后面if中有一个成立,会自动加上where,如果都不成立,忽略where--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"uname != null and uname != ''"</span>&gt;</span>            and uname = #&#123;uname&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"pwd !=null and pwd !=''"</span>&gt;</span>            and pwd = #&#123;pwd&#125;s        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"sid != 0"</span>&gt;</span>            and sid = #&#123;sid&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="3"><li><choose><when><otherwise>就跟switch…case…差不多，符合哪种条件就拼接哪种条件。</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"条件1"</span>&gt;</span> ​<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"条件2"</span>&gt;</span> ​<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>​<span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>​<span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="4"><li><set>用于维护 update 语句中的 set 子句，可以解决修改属性个数和种类不确定的问题，功能如下：<ul><li>满足条件时， 会自动添加 set 关键字。</li><li>会去除 set 子句中多余的逗号。</li><li>不满足条件时, 不会生成 set 关键字。</li></ul></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"条件1"</span>&gt;</span>​<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"条件2"</span>&gt;</span> ​<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>​<span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre><ol start="5"><li><bind>用于对数据进行再加工，用于模糊查询。</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selLike"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"uname"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"'%'+uname+'%'"</span>/&gt;</span>    select * from t_user2 where uname like #&#123;uname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="6"><li><foreach>用于在 SQL 语句中遍历集合参数，在 in 查询中使用</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">""</span> <span class="hljs-attr">open</span>=<span class="hljs-string">""</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">""</span> <span class="hljs-attr">close</span>=<span class="hljs-string">""</span> <span class="hljs-attr">item</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></code></pre><ul><li>collection: 待遍历的集合。</li><li>open: 设置开始符号。</li><li>separator: 项目分隔符。</li><li>close: 设置结束符号。</li><li>item: 迭代变量。</li></ul><p>接口中代码：public List<User> findIn(List<Integer> list);</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findIn"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>    select * from t_user2 where sid in    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">open</span>=<span class="hljs-string">"("</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"i"</span>&gt;</span>        #&#123;i&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="7"><li><sql>和<include>，<sql>用于提取 SQL 语句， <include>用于引用 SQL 语句。</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span>&gt;</span>​  列名1,列名2,列名3,...​<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">""</span>&gt;</span>​  select ​<span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">*</span>"**列名**<span class="hljs-attr">2</span>**"*/&gt;</span> from ...<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybaits框架的学习总结一</title>
    <link href="/2020/07/18/Mybaits%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <url>/2020/07/18/Mybaits%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h4 id="MyBaits简介"><a href="#MyBaits简介" class="headerlink" title="MyBaits简介"></a>MyBaits简介</h4><ol><li>MyBatis 是一个 ORM 框架, 用于操作数据库, 底层是对 jdbc 进行的封装。</li><li>MyBatis 的前身是 iBatis, 是 Apache 下的一个开源项目。</li><li>现在MyBatis 迁移到GitHub上了，<a href="https://mybatis.org/mybatis-3/zh/" target="_blank" rel="noopener">API中文使用文档</a>和以及MyBatis <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">各版本下载地址</a></li></ol><h4 id="MyBaits环境搭建-jar-包详解"><a href="#MyBaits环境搭建-jar-包详解" class="headerlink" title="MyBaits环境搭建 jar 包详解"></a>MyBaits环境搭建 jar 包详解</h4><p>创建一个java工程后，导入从jar包</p><ol><li><p>核心jar包</p><ul><li>mybatis-3.2.7.jar  里面封装了io,jdbc,bulider等</li></ul></li><li><p>MyBatis 依赖的 jar</p><ul><li>asm-3.3.1.jar                               字节码解析包, 被 cglib 依赖</li><li>cglib-2.2.2.jar                             动态代理的实现</li><li>commons-logging-1.1.1.jar        日志包 javassist-3.17.1-GA.jar 字节码解析包</li><li>log4j-1.2.17.jar                             日志包</li><li>log4j-api-2.0-rc1.jar                     日志</li><li>log4j-core-2.0-rc1.jar                   日志</li><li>slf4j-api-1.7.5.jar                          日志</li><li>slf4j-log4j12-1.7.5.jar                   日志</li></ul></li><li><p>驱动 jar</p><ul><li>mysql-connector-java-5.1.48.jar  mysql的驱动jar包</li><li>ojdbc6.jar                                       oracle的驱动jar包</li></ul></li></ol><h4 id="MyBaits-核心配置文件"><a href="#MyBaits-核心配置文件" class="headerlink" title="MyBaits 核心配置文件"></a>MyBaits 核心配置文件</h4><ol><li><p>要求</p><p>是一个 xml 文件 ，命名无要求 , 位置无要求 ，一般叫 mybatis.xml或applicationContext-dao.xml，放在 src 目录下</p></li><li><p>dtd</p><p>MyBatis官方提供了dtd约束，方便编写</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">PUBLIC <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta"><span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></code></pre></li><li><p>配置文件的内容</p></li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">  <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;driver&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;url&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;username&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;password&#125;"</span>/&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><ol start="4"><li>解释下方标签的含义</li></ol><ul><li><p><configuration>这是配置文件的根元素, 所有的其他元素都要在这个标签下使用.</p></li><li><p><environments>用于管理所有的环境, 并可以指定默认使用哪个环境. 通过 default 属性来指定.</p></li><li><p><environment>用于配置环境. id 属性用于唯一标识当前环境</p></li><li><p><transactionManager>用于配置事务管理器</p><ul><li>type属性用于指定 MyBatis 采用何种方式管理事务 <ul><li>JDBC: 表示 MyBatis 采用与原生 JDBC 一致的方式管理事务</li><li>MANAGED: 表示将事务管理交给其他容器进行, 例如 Spring</li></ul></li></ul></li><li><p><DataSource>用于配置数据源, 设置 MyBatis 是否使用连接池技术, 并且配置数据库连接的四个参数</p><ul><li>type 属性用于设置 MyBatis 是否使用连接池技术<ul><li>POOLED, 表示采用连接池技术</li><li>UNPOOLED, 表示每次都会开启和关闭连接, 不使用连接池技术</li><li>JNDI, 使用其他容器(例如 Spring)提供数据源</li></ul></li></ul></li><li><p><property>用于配置数据库连接参数(driver, url, username, password)</p></li><li><p><mappers> 是需要写入映射文件的全路径，但是要以斜杠划分。</p><blockquote><p>&lt;<strong>mapper resource=”com/batis/mapper/UserMapper.xml”</strong>/&gt;</p></blockquote></li><li><p><properties> 用于加载外部的 properties 文件。获取 properties 文件中数据时, 要通过<strong>${}</strong>的方式获取。</p><blockquote><p> &lt;<strong>properties resource=”db.properties”</strong>&gt;&lt;/<strong>properties</strong>&gt;</p></blockquote></li><li><p><typeAlias> 用于给pojo类给取别名。</p><blockquote><p> &lt;<strong>typeAlias type=”com.batis.pojo.User” alias=”User”</strong>&gt;&lt;/<strong>typeAlias</strong>&gt;</p></blockquote></li></ul><ol start="5"><li>Mapper的映射文件</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">  <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"org.mybatis.example.BlogMapper"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectBlog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Blog"</span>&gt;</span>    select * from Blog where id = #&#123;id&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ul><li>mapper 根元素</li><li>namespace属性 用于指定命名空间, mybatis 是通过 namespace+id 的方式来定位 SQL 语句的, 所以必须指定 namespace. 通常 namespace 被配置为全限定路径。</li><li>select  用于定义查询语句(DQL)</li><li>id 属性 用于唯一表示 SQL 语句, 类似于方法的方法名。</li><li>resultType 属性 用于设定查询返回的数据类型, 要写类型的全限定路径. 如果返回的是集合类型, 要写集合的泛型的类型。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 博客框架的安装与注意事项</title>
    <link href="/2020/07/12/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/07/12/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-博客框架的安装与注意事项"><a href="#Hexo-博客框架的安装与注意事项" class="headerlink" title="Hexo 博客框架的安装与注意事项"></a>Hexo 博客框架的安装与注意事项</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1382587380&auto=0&height=66"></iframe><p>前言：这是第一次使用Hexo博客框架来记录自己的学习历程，但在安装Hexo的过程中也遇到了不少的问题，踩了不少的坑，现在就将遇到的问题梳理。  </p><p>配置环境：windos10  </p><p>需要提前下好Git和node.js(因为Hexo是基于node.js的静态博客框架)</p><hr><h3 id="Hexo博客安装流程"><a href="#Hexo博客安装流程" class="headerlink" title="Hexo博客安装流程"></a>Hexo博客安装流程</h3><ol><li>git的安装</li><li>node的安装</li><li>安装Hexo</li><li>GitHub上创建仓库</li><li>将Hexo远程部署在gitHub上</li><li>发布文章</li></ol><h4 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h4><p>windows系统直接可以上<a href="https://git-scm.com" target="_blank" rel="noopener">git官网</a>上下载,选择对应系统的资源安装即可。 </p><blockquote><p>git –version //查看git的版本</p></blockquote><h4 id="node的安装"><a href="#node的安装" class="headerlink" title="node的安装"></a>node的安装</h4><p>windos也可以上<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官网</a>上下载LTS版，安装好后使用node -v就可以查看版本，node也会自动配置在环境变量中，如果没有就需要自己手动添加，新版nodejs里集成了npm，只要nodejs安装成功，npm也应该安装成功，在cmd中输入npm -v，即可查看到npm的版本号。再介绍下npm，这是一个包管理器，接下来的安装都和这个命令有关，但由于众所周知的原因，国内速度很慢，所以我们进行一个镜像源更改，改到淘宝的源，利用npm安装一个cnpm包管理器。</p><blockquote><p>node -v //查看node版本</p><p>npm -v //查看npm版本</p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> //替换到国内淘宝的源</p></blockquote><h4 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h4><p>做好了上述工作后就可以安装Hexo框架，以下命令安装</p><blockquote><p>cnpm install -g hexo-cli  //安装hexo</p></blockquote><p>安装好了后使用hexo -v命令就可以查看hexo的信息</p><p><img src="hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/hexo-v.PNG" srcset="/img/loading.gif" alt="hexo信息"></p><p>这里我遇到了第一个问题，hexo框架安装成功后，却使用不了hexo 的指令，问题可能是你是在输入安装指令的时候把 “-g”漏了，”-g”的作用是把hexo的相关指令配置成全局变量，进行全局安装，这种情况重新安装即可，注意这里安装的hexo是需要管理员权限，可以去运行C:Windos\System32下的cmd.exe文件即可。还有另外一种情况是配置指令是正确的，但是就是运行不了，我的就是后一种，这个问题也是十分的罕见，我游览了许多博主的博客，大多数都是解释第一种到问题。我晕:sweat:，好在经过2个小时的尝试，我意识到hexo是依赖于nodejs，于是通过命令窗口行来到安装node根目录下，输入了hexo安装指令了，终于成功了:smile:。</p><p>接下来，选择一个盘新建一个文件夹，取名为blog,然后终端进入这个blog文件夹，运行以下命令初始化</p><blockquote><p>hexo init //初始化博客</p></blockquote><p>初始化后，blog下会有生成的文件，如下图</p><p><img src="hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/hexo.PNG" srcset="/img/loading.gif" alt="hexo目录下的文件"></p><p>接下来就是启动hexo博客了，运行以下命令，然后在你的浏览器中输入 localhost:4000，这个命令默认的是使用4000端口，如果没有错误的话，你可以使用 localhost:4000 在你的浏览器中预览你的博客。</p><blockquote><p>hexo s //启动博客</p></blockquote><p><img src="/blog%E7%95%8C%E9%9D%A2.PNG" srcset="/img/loading.gif" alt="本地blog界面"></p><p>这里我更改了hexo的主题，使用了 hexo 主题中比较热门的yilia，下载的地址在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes</a>大家可以在网上找到自己喜欢的主题。关于如何修改主题，首先将下载好的资源放在blog目录下的themes文件夹，然后修改根目录中的_config.yml文件内容（如下），将theme 修改为你资源的文件夹名，保存。</p><p><img src="./hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9.PNG" srcset="/img/loading.gif" alt="主题修改"></p><p>接着命令行窗口到blog的更目录下使用三行命令</p><blockquote><p>hexo clean //清除服务器上的缓冲数据</p><p>hexo g //重新部署服务器</p><p>hexo //启动服务器</p></blockquote><p>这样就修改好主题了。</p><h4 id="github上创建仓库"><a href="#github上创建仓库" class="headerlink" title="github上创建仓库"></a>github上创建仓库</h4><p>首先需要自己去注册github账号，然后在右上角点击加号按钮，如下图</p><p><img src="hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA.PNG" srcset="/img/loading.gif" alt="仓库创建"></p><p>选择”New repository”</p><p><img src="./hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA2.PNG" srcset="/img/loading.gif" alt="仓库创建2"></p><p>输入仓库名，一般是所属者+.githtub+.io,我这是已经存在了这个仓库了所以系统会提示你仓库名已存在，你可自己更改，这样后期就可以直接输入这个仓库名进入自己的博客了。</p><h4 id="将Hexo远程部署在gitHub上"><a href="#将Hexo远程部署在gitHub上" class="headerlink" title="将Hexo远程部署在gitHub上"></a>将Hexo远程部署在gitHub上</h4><p>做好以上准备就可以进行部署了，首先需要去blog目录下找到_config.yml文件，编辑打开。找到deploy字段添加下列信息：</p><p><img src="./hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/%E4%BF%AE%E6%94%B9%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80.PNG" srcset="/img/loading.gif" alt="部署地址修改"></p><p>注意这里有一个小坑，type、repo、branch 后面都有一个空格，如果没有，在使用hexo -g指令生产静态文件时会报错。repo 是你的仓库的网路地址，在你的仓库页面点击”code”按钮就可以得到（默认生产的仓库是没有文件的），复制到repo 后面，记住要加空格。</p><p><img src="./hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/copypath.PNG" srcset="/img/loading.gif" alt="复制地址"></p><p>这里repo 使用的HTTPS 网路协议,你也可以使用SSH协议 ,点击”Use SSH”，就可以了。branch 不写也会默认指定master。保存，关闭。</p><p>使用命令窗口界面来到blog 下，hexo g生产静态文件，hexo d远程部署。</p><blockquote><p>hexo g</p><p>hexo d//远程部署</p></blockquote><p><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1594730246&di=8a0241ca15a3191dbd62f7846ff42bb4&src=http://a3.att.hudong.com/14/75/01300000164186121366756803686.jpg" srcset="/img/loading.gif" alt=" 网络图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
